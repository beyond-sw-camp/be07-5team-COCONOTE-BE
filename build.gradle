plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.cloud.tools.jib' version '3.4.3' // Jib 플러그인 버전 확인

}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

//    swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'


//    redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    //embedded-redis
    //complie을 implementation으로 수정
    implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'

//    websocket chat
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.webjars.bower:bootstrap:4.3.1'
    implementation 'org.webjars.bower:vue:2.5.16'
    implementation 'org.webjars.bower:axios:0.17.1'
    implementation 'org.webjars:sockjs-client:1.1.2'
    implementation 'org.webjars:stomp-websocket:2.3.3-1'
    implementation 'com.google.code.gson:gson:2.8.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

jib {
    from {
        image = 'openjdk:17-slim'
    }
    to {
        image = 'jsangmin00/coconote' // 도커 허브 계정명/이미지명
        tags = ['latest']
    }
    container {
        ports = ['8080']
        environment = ['SPRING_PROFILES_ACTIVE': 'dev'] // 환경 변수
        mainClass = 'com.example.coconote.CoconoteApplication' // 메인 클래스
    }
}